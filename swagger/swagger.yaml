swagger: '2.0'
info:
  version: 1.0.0
  title: User Management API
  description: API for managing user authentication, profiles, roles, and sessions.
basePath: /api
tags:
  - name: Users
    description: API endpoints for user management
schemes:
  - https
paths:
  /users/login:
    post:
      summary: Login user
      tags:
        - Users
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: User credentials for login
          required: true
          schema:
            type: object
            properties:
              email:
                type: string
                format: email
              password:
                type: string
      responses:
        '200':
          description: Successful login
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: true
              message:
                type: string
                example: Login Successfully
              user:
                $ref: '#/definitions/User'
              token:
                type: string
                example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...'
        '401':
          description: Invalid email or password
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              error:
                type: string
                example: Invalid email or password
        '500':
          description: Something went wrong
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              error:
                type: string
                example: Something went wrong
  /edit-profile:
    put:
      summary: Edit user profile
      tags:
        - Users
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: User profile data to be updated
          required: true
          schema:
            $ref: '#/definitions/User'
      security:
        - cookieAuth: []
      responses:
        '200':
          description: Profile updated successfully
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: true
              message:
                type: string
                example: Profile updated successfully
              newUser:
                $ref: '#/definitions/User'
        '401':
          description: User not defined. Please login again.
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              error:
                type: string
                example: User not defined. Please login again.
        '500':
          description: Something went wrong
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              error:
                type: string
                example: Something went wrong
  /update-password:
    put:
      summary: Change user password
      tags:
        - Users
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Password update details
          required: true
          schema:
            type: object
            properties:
              password:
                type: string
                format: password
              newPassword:
                type: string
                format: password
              confirmPassword:
                type: string
                format: password
      security:
        - cookieAuth: []
      responses:
        '201':
          description: Password updated successfully
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: true
              message:
                type: string
                example: Password updated successfully
        '401':
          description: Current password is incorrect or new and confirm password do not match
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              error:
                type: string
                example: Current password is incorrect or new and confirm password do not match
        '500':
          description: Something went wrong
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              error:
                type: string
                example: Something went wrong
  /forget-password:
    post:
      summary: Send reset password email
      tags:
        - Users
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Email address for password reset
          required: true
          schema:
            type: object
            properties:
              email:
                type: string
                format: email
      responses:
        '200':
          description: Reset password email sent successfully
          schema:
            type: object
            properties:
              token:
                type: string
                example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...'
        '404':
          description: User not found with this email
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              error:
                type: string
                example: User not found with this email
        '500':
          description: Server error
          schema:
            type: object
            properties:
              error:
                type: string
                example: Server error
  /reset-password:
    put:
      summary: Reset user password
      tags:
        - Users
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: t
          in: query
          required: true
          type: string
        - in: body
          name: body
          description: New password for reset
          required: true
          schema:
            type: object
            properties:
              password:
                type: string
                format: password
      responses:
        '200':
          description: Password changed successfully
          schema:
            type: object
            properties:
              message:
                type: string
                example: Password changed successfully
        '400':
          description: Token has expired
          schema:
            type: object
            properties:
              message:
                type: string
                example: Token has expired
        '500':
          description: Server error
          schema:
            type: object
            properties:
              error:
                type: string
                example: Server error
  /verify-email:
    get:
      summary: Verify user email
      tags:
        - Users
      produces:
        - application/json
      parameters:
        - name: t
          in: query
          required: true
          type: string
      responses:
        '200':
          description: Email verified successfully
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: true
              message:
                type: string
                example: Email verified successfully
        '401':
          description: No token in URL or user not found
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              error:
                type: string
                example: No token in URL or user not found
        '500':
          description: Server error
          schema:
            type: object
            properties:
              error:
                type: string
                example: Server error
  /user-list:
    get:
      summary: Get all users
      tags:
        - Users
      produces:
        - application/json
      security:
        - cookieAuth: []
      responses:
        '200':
          description: Successfully retrieved users
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: true
              message:
                type: string
                example: Successfully retrieved users
              users:
                type: array
                items:
                  $ref: '#/definitions/User'
        '401':
          description: Unauthorized access
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              error:
                type: string
                example: Unauthorized access
        '500':
          description: Server error
          schema:
            type: object
            properties:
              error:
                type: string
                example: Server error
  /assign-role:
    put:
      summary: Assign role to user
      tags:
        - Users
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Email and role details for assignment
          required: true
          schema:
            type: object
            properties:
              email:
                type: string
                format: email
              role:
                type: string
      security:
        - cookieAuth: []
      responses:
        '200':
          description: Role assigned successfully
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: true
              message:
                type: string
                example: Role assigned successfully
        '401':
          description: Unauthorized access
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              error:
                type: string
                example: Unauthorized access
        '500':
          description: Server error
          schema:
            type: object
            properties:
              error:
                type: string
                example: Server error
  /update-status:
    put:
      summary: Update user status
      tags:
        - Users
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Email and status update details
          required: true
          schema:
            type: object
            properties:
              email:
                type: string
                format: email
              isActive:
                type: boolean
      security:
        - cookieAuth: []
      responses:
        '200':
          description: User status updated successfully
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: true
              message:
                type: string
                example: User status updated successfully
        '401':
          description: Unauthorized access
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              error:
                type: string
                example: Unauthorized access
        '500':
          description: Server error
          schema:
            type: object
            properties:
              error:
                type: string
                example: Server error
  /logout:
    get:
      summary: Logout user
      tags:
        - Users
      security:
        - cookieAuth: []
      responses:
        '200':
          description: User logged out successfully
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: true
              message:
                type: string
                example: User logged out successfully
        '500':
          description: Server error
          schema:
            type: object
            properties:
              error:
                type: string
                example: Server error
definitions:
  User:
    type: object
    properties:
      firstName:
        type: string
      lastName:
        type: string
      email:
        type: string
        format: email
      gender:
        type: string
        enum:
          - male
          - female
      preferredLanguage:
        type: string
      preferredCurrency:
        type: string
      phoneNumber:
        type: string
      province:
        type: string
      district:
        type: string
      street:
        type: string
      city:
        type: string
      state:
        type: string
      postalCode:
        type: string
